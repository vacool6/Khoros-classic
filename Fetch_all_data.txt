1. Using limit (not recommended)

const apiUrl = "/api/2.0/search?q=select id,board.id from messages where author.id = \'30036\' limit 999";

fetch(apiUrl)
  .then(response => {
    if (!response.ok) {
      throw new Error('Network response was not ok ' + response.statusText);
    }
    return response.json();
  })
  .then(data => {
    console.log('API Response:', data);
  })
  .catch(error => {
    console.error('There was a problem with the fetch operation:', error);
  });


2. Using next_cursor

const apiUrlBase = "/api/2.0/search?q=select id,board.id from messages where author.id = '30036'";

async function fetchAllData() {
  let allData = [];
  let nextCursor = '';
  
  try {
    while (true) {
      const apiUrl = nextCursor ? `${apiUrlBase} CURSOR "${nextCursor}"` : apiUrlBase;
      
      const response = await fetch(apiUrl);
      if (!response.ok) {
        throw new Error('Network response was not ok ' + response.statusText);
      }
      
      const data = await response.json();
      
      allData = allData.concat(data.data.items); 
        
      if (data.data.next_cursor) {
        nextCursor = data.data.next_cursor;
      } else {
        break;
      }
    }
    
    console.log('All API Responses:', allData);
  } catch (error) {
    console.error('There was a problem with the fetch operation:', error);
  }
}

fetchAllData();

